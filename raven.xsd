<?xml version="1.0"?>
<xsd:schema version="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"  elementFormDefault="qualified">

    <xsd:element name="Simulation">
        <xsd:complexType>
            <xsd:all>
                <xsd:element name="RunInfo"          type="RunInfoData"      minOccurs="1"/>
                <xsd:element name="Models"           type="ModelsData"       minOccurs="1"/>
                <xsd:element name="Steps"                                    minOccurs="1">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                        <xsd:attribute name="verbosity" type="xsd:string" default="all"/>
                    </xsd:complexType>
                </xsd:element>
                <xsd:element name="Samplers"         type="SamplerData"      minOccurs="0"/>
                <xsd:element name="DataObjects"      type="DataObjectsData"  minOccurs="0"/>
                <xsd:element name="Distributions"    type="DistributionData" minOccurs="0"/>
                <xsd:element name="Functions"                                minOccurs="0">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
                <xsd:element name="Databases"                                minOccurs="0">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
                <xsd:element name="OutStreamManager" type="OutStreamData"    minOccurs="0"/>
            </xsd:all>
            <xsd:attribute name="verbosity" type="verbosityAttr" default="all"/>
        </xsd:complexType>

        <xsd:key name="distName">
            <xsd:selector xpath="./Distributions/*"/>
            <xsd:field    xpath="@name"/>
        </xsd:key>
        <xsd:keyref name="samplerName1"  refer="distName">
            <xsd:selector xpath="./Samplers/*/variable/distribution"/>
            <xsd:field    xpath="."/>
        </xsd:keyref>
        <xsd:keyref name="samplerName2"  refer="distName">
            <xsd:selector xpath="./Samplers/*/Distribution/distribution"/>
            <xsd:field    xpath="."/>
        </xsd:keyref>
<!--         <xsd:key name="ppName">
            <xsd:selector xpath="./Models/PostProcessor"/>
            <xsd:field    xpath="@name"/>
        </xsd:key> -->
    </xsd:element>

    <xsd:simpleType  name="verbosityAttr">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="silent"/>
            <xsd:enumeration value="quiet" />
            <xsd:enumeration value="all"   />
            <xsd:enumeration value="debug" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="RunInfoData">
        <xsd:all>
            <xsd:element name="WorkingDir"                            minOccurs="1">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="runRelative" type="xsd:string"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="Files"              type="xsd:string"  minOccurs="0"/>
            <xsd:element name="Sequence"           type="xsd:string"  minOccurs="1"/>
            <xsd:element name="batchSize"          type="xsd:integer" minOccurs="0" default="1"/>
            <xsd:element name="JobName"            type="xsd:string"  minOccurs="0"/>
            <xsd:element name="NumThreads"         type="xsd:integer" minOccurs="0" default="1"/>
            <xsd:element name="mode" minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:choice>
                        <xsd:element name="runQSUB"                        minOccurs="0"/>
                        <xsd:element name="nodefile"     type="xsd:string" minOccurs="0"/>
                        <xsd:element name="nodefileenv"  type="xsd:string" minOccurs="0"/>
                    </xsd:choice>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="NumMPI"             type="xsd:integer" minOccurs="0" default="1"/>
            <xsd:element name="totalNumCoresUsed"  type="xsd:integer" minOccurs="0" default="1"/>
            <xsd:element name="precommand"         type="xsd:string"  minOccurs="0" default="None"/>
            <xsd:element name="postcommand"        type="xsd:string"  minOccurs="0" default="None"/>
            <xsd:element name="clusterParameters"  type="xsd:string"  minOccurs="0" default="None"/>
            <xsd:element name="MaxLogSize"         type="xsd:integer" minOccurs="0"/>
            <xsd:element name="deleteOutExtension" type="xsd:string"  minOccurs="0" default="None"/>
            <xsd:element name="delSucLogFiles"     type="xsd:boolean" minOccurs="0" default="false"/>

            <xsd:element name="NumNode"          type="xsd:integer" minOccurs="0"/>
            <xsd:element name="queueingSoftware" type="xsd:string"  minOccurs="0" default="PBS PROFESSIONAL"/>

            <xsd:element name="expectedTime"     type="xsd:string"  minOccurs="0" default="None"/>
            <xsd:element name="DefaultInputFile" type="xsd:string"  minOccurs="0" default="test.xml"/>
            <xsd:element name="CustomMode"       minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="file"   type="xsd:string"  use="required"/>
                    <xsd:attribute name="class"  type="xsd:string"  use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:all>
    </xsd:complexType>

    <xsd:complexType name="DistributionData">
        <xsd:sequence>
            <xsd:element name="Beta"          type="BetaDistribution"          minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Exponential"   type="ExponentialDistribution"   minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Gamma"         type="GammaDistribution"         minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Logistic"      type="LogisticDistribution"      minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="LogNormal"     type="LogNormalDistribution"     minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Normal"        type="NormalDistribution"        minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Triangular"    type="TriangularDistribution"    minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Uniform"       type="UniformDistribution"       minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Weibull"       type="WeibullDistribution"       minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Bernoulli"     type="BernoulliDistribution"     minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Binomial"      type="BinomialDistribution"      minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Poisson"       type="PoissonDistribution"       minOccurs="0" maxOccurs="unbounded"/>
            <!-- ******************************************************* -->
            <!-- The N-Dimensional Distributions are not yet implemented -->
            <!-- ******************************************************* -->
            <xsd:element name="NDInverseWeight"         minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="NDCartesianSpline"       minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
<!-- *********************************************************************** -->
<!--                              Distributions                              -->
<!-- *********************************************************************** -->
    <xsd:complexType name="BetaDistribution">
        <xsd:all>
            <xsd:element name="lowerBound"                    minOccurs="0">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:float">
                        <xsd:minInclusive value="0"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="upperBound"                    minOccurs="0">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:float">
                        <xsd:maxInclusive value="1"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="low"        type="xsd:float" minOccurs="1"/>
            <!-- low cannot be less than lowerBound -->
            <xsd:element name="high"       type="xsd:float" minOccurs="1"/>
            <!-- high cannot be larger than upperBound -->
            <xsd:element name="alpha"      type="xsd:float" minOccurs="0"/>
            <xsd:element name="beta"       type="xsd:float" minOccurs="0"/>
            <!-- either both alpha and beta or peak factor must be specified -->
            <xsd:element name="peakFactor" type="xsd:float" minOccurs="0"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="ExponentialDistribution">
        <xsd:all>
            <xsd:element name="lowerBound"                    minOccurs="0">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:float">
                        <xsd:minInclusive value="0"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="upperBound" type="xsd:float" minOccurs="0"/>
            <xsd:element name="lambda"     type="xsd:float" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="GammaDistribution">
        <xsd:all>
            <xsd:element name="lowerBound"                    minOccurs="0">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:decimal">
                        <xsd:minInclusive value="0"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="upperBound" type="xsd:decimal" minOccurs="0"/>
            <xsd:element name="alpha"      type="xsd:decimal" minOccurs="1"/>
            <xsd:element name="beta"       type="xsd:decimal" minOccurs="0"/>
            <xsd:element name="low"        type="xsd:float" minOccurs="1"/>
            <!-- low cannot be less than lowerBound -->
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="LogisticDistribution">
        <xsd:all>
            <xsd:element name="upperBound" type="xsd:decimal" minOccurs="0"/>
            <xsd:element name="lowerBound" type="xsd:decimal" minOccurs="0"/>
            <xsd:element name="location"      type="xsd:decimal" minOccurs="1"/>
            <xsd:element name="scale"         type="xsd:decimal" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="LogNormalDistribution">
        <xsd:all>
            <xsd:element name="lowerBound"                    minOccurs="0">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:decimal">
                        <xsd:minInclusive value="0"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="upperBound" type="xsd:decimal" minOccurs="0"/>
            <xsd:element name="mean"       type="xsd:decimal" minOccurs="1"/>
            <xsd:element name="sigma"      type="xsd:decimal" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="NormalDistribution">
        <xsd:all>
            <xsd:element name="lowerBound" type="xsd:float" minOccurs="0"/>
            <xsd:element name="upperBound" type="xsd:float" minOccurs="0"/>
            <xsd:element name="mean"       type="xsd:float" minOccurs="1"/>
            <xsd:element name="sigma"      type="xsd:float" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="TriangularDistribution">
        <xsd:all>
            <xsd:element name="min"  type="xsd:decimal" minOccurs="1"/>
            <xsd:element name="max"  type="xsd:decimal" minOccurs="1"/>
            <xsd:element name="apex" type="xsd:decimal" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="UniformDistribution">
        <xsd:all>
            <xsd:element name="lowerBound" type="xsd:float" minOccurs="1"/>
            <xsd:element name="upperBound" type="xsd:float" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="WeibullDistribution">
        <xsd:all>
            <xsd:element name="lowerBound"                    minOccurs="0">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:decimal">
                        <xsd:minInclusive value="0"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="upperBound" type="xsd:decimal" minOccurs="0"/>
            <xsd:element name="k"          type="xsd:decimal" minOccurs="1"/>
            <xsd:element name="lambda"     type="xsd:decimal" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="BernoulliDistribution">
        <xsd:all>
            <xsd:element name="p" minOccurs="1">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:decimal">
                        <xsd:minInclusive value="0"/>
                        <xsd:maxInclusive value="1"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="BinomialDistribution">
        <xsd:all>
            <xsd:element name="p" minOccurs="1">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:decimal">
                        <xsd:minInclusive value="0"/>
                        <xsd:maxInclusive value="1"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
            <xsd:element name="n" minOccurs="1">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:integer">
                        <xsd:minExclusive value="0"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="PoissonDistribution">
        <xsd:all>
            <xsd:element name="mu" type="xsd:decimal" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:simpleType name="typeAttr">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="PDF"/>
            <xsd:enumeration value="CDF"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="data_filenameType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="type" type="typeAttr" use="required"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="NDInverseWeightDistribution">
        <xsd:all>
            <xsd:element name="p"             type="xsd:decimal"       minOccurs="1"/>
            <xsd:element name="working_dir"   type="xsd:string"        minOccurs="1"/>
            <xsd:element name="data_filename" type="data_filenameType" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>
    <xsd:complexType name="NDCartesianSplineDistribution">
        <xsd:all>
            <xsd:element name="data_filename" type="data_filenameType" minOccurs="1"/>
            <xsd:element name="working_dir"   type="xsd:string"        minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

<!-- *********************************************************************** -->
<!--                                 Samplers                                -->
<!-- *********************************************************************** -->
    <xsd:complexType name="SamplerData">
        <xsd:sequence>
            <xsd:element name="MonteCarlo"            type="MonteCarloSampler"      minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Grid"                  type="GridSampler"            minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="SparseGridCollocation" type="SparseGridSampler"      minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Sobol"                 type="SparseGridSampler"      minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Stratified"            type="GridSampler"            minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="ResponseSurfaceDesign" type="ResponseSurfaceSampler" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="FactorialDesign"       type="FactorialSampler"       minOccurs="0" maxOccurs="unbounded"/>
            <!-- Not all of them implemented yet -->
            <xsd:any processContents="skip" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="samplerInitType">
        <xsd:all>
            <!-- the requirements below will change depending on the fixes in the manual -->
            <xsd:element name="limit"                    type="xsd:string"  minOccurs="0"/>
            <xsd:element name="initial_seed"             type="xsd:integer" minOccurs="0"/>
            <xsd:element name="reseed_at_each_iteration" type="xsd:string"  minOccurs="0"/>
            <xsd:element name="dist_init" minOccurs="0">
                <xsd:complexType>
                    <xsd:sequence>
                        <!-- ******************* -->
                        <!-- Not yet implemented -->
                        <!-- ******************* -->
                        <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </xsd:all>
    </xsd:complexType>

    <xsd:simpleType name="floatList">
        <xsd:list itemType="xsd:float"/>
    </xsd:simpleType>
    <xsd:simpleType name="variableDistributionType">
        <xsd:restriction base="xsd:string"/>
    </xsd:simpleType>
    <xsd:complexType name="extendedVariableDistributionType">
        <xsd:simpleContent>
            <xsd:extension base="variableDistributionType">
                <xsd:attribute name="dim"  type="xsd:string"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="gridType">
            <xsd:simpleContent>
                <xsd:extension base="xsd:string"> <!--base="floatList" due to global_grid-->
                    <xsd:attribute name="type"         type="xsd:string" use="required"/>
                    <xsd:attribute name="construction" type="xsd:string"/>
                    <!-- The condition is not yet implemented -->
                    <xsd:attribute name="steps"        type="xsd:integer"/>
                    <xsd:attribute name="upperBound"   type="xsd:float"/>
                    <xsd:attribute name="lowerBound"   type="xsd:float"/>
                </xsd:extension>
            </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="boundariesType">
        <xsd:all>
            <xsd:element name="lower" type="xsd:float" minOccurs="1"/>
            <xsd:element name="upper" type="xsd:float" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="type"         type="xsd:string" use="required"/>
    </xsd:complexType>
    <xsd:complexType name="variableType">
        <xsd:sequence>
            <xsd:element name="distribution" type="extendedVariableDistributionType" minOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>
    <xsd:complexType name="extendedVariableType">
        <xsd:complexContent>
            <xsd:extension base="variableType">
                <xsd:choice>
                    <xsd:element name="grid"       type="gridType"       minOccurs="1"/>
                    <xsd:element name="boundaries" type="boundariesType" minOccurs="1"/>
                </xsd:choice>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="MonteCarloSampler">
        <xsd:sequence>
            <xsd:element name="sampler_init" type="samplerInitType" minOccurs="1"/>
            <xsd:element name="variable"     type="variableType"    minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Restart"                        minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="class" type="xsd:string" use="required"/>
                    <xsd:attribute name="type"  type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="GridSampler">
        <xsd:sequence>
            <xsd:element name="sampler_init" type="samplerInitType"      minOccurs="0"/>
            <xsd:element name="variable"     type="extendedVariableType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="Distribution" type="extendedVariableType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="global_grid"                           minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:sequence>
                        <xsd:element name="grid"                           minOccurs="1">
                            <xsd:complexType mixed="true">
                                <xsd:attribute name="name"         type="xsd:string"/>
                                <xsd:attribute name="type"         type="xsd:string"/>
                                <xsd:attribute name="construction" type="xsd:string"/>
                                <!-- The condition is not yet implemented -->
                                <xsd:attribute name="steps"        type="xsd:integer"/>
                                <xsd:attribute name="upperBound"   type="xsd:float"/>
                                <xsd:attribute name="lowerBound"   type="xsd:float"/>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="Restart"                        minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="class" type="xsd:string" use="required"/>
                    <xsd:attribute name="type"  type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="SparseGridSampler">
        <xsd:sequence>
            <xsd:element name="variable"     type="variableType" minOccurs="0" maxOccurs="unbounded"/>
            <!--xsd:element name="Distribution" type="variableType" minOccurs="0" maxOccurs="unbounded"/-->
            <xsd:element name="ROM"                        minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="class" type="xsd:string" use="required"/>
                    <xsd:attribute name="type"  type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="Restart"                        minOccurs="0">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="class" type="xsd:string" use="required"/>
                    <xsd:attribute name="type"  type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name"     type="xsd:string" use="required"/>
        <xsd:attribute name="parallel" type="xsd:string"/>
        <xsd:attribute name="outfile"  type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="ResponseSurfaceSampler">
        <xsd:sequence>
            <xsd:element name="sampler_init" type="samplerInitType" minOccurs="0"/>
            <xsd:element name="ResponseSurfaceDesignSettings" minOccurs="1">
                <xsd:complexType mixed="true">
                    <xsd:all>
                        <xsd:element name="algorithm_type" type="xsd:string"   minOccurs="1"/>
                        <xsd:element name="ncenters"       type="xsd:integer" minOccurs="0"/>
                        <xsd:element name="centers"        type="xsd:string"  minOccurs="0"/>
                        <xsd:element name="alpha"          minOccurs="0">
                            <xsd:simpleType>
                                <xsd:restriction   base="xsd:string">
                                    <xsd:enumeration value="orthogonal"/>
                                    <xsd:enumeration value="rotatable" />
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:element>
                        <xsd:element name="face"           minOccurs="0">
                            <xsd:simpleType>
                                <xsd:restriction   base="xsd:string">
                                    <xsd:enumeration value="circumscribed"/>
                                    <xsd:enumeration value="inscribed" />
                                    <xsd:enumeration value="faced"   />
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:element>
                    </xsd:all>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="variable"     type="extendedVariableType" minOccurs="0" maxOccurs="unbounded">
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="FactorialSampler">
        <xsd:sequence>
            <xsd:element name="sampler_init" type="samplerInitType" minOccurs="0"/>
            <xsd:element name="FactorialSettings" minOccurs="1">
                <xsd:complexType mixed="true">
                    <xsd:all>
                        <xsd:element name="algorithm_type" type="xsd:string"   minOccurs="1"/>
                        <xsd:element name="gen"            type="xsd:string"   minOccurs="0"/>
                        <xsd:element name="genMap"         type="xsd:string"  minOccurs="0"/>
                     </xsd:all>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="variable"     type="extendedVariableType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

<!-- *********************************************************************** -->
<!--                                  Models                                 -->
<!-- *********************************************************************** -->

    <xsd:complexType name="ModelsData">
        <xsd:sequence>
            <!--xsd:element name="Dummy"         type="DummyModel"    minOccurs="0" maxOccurs="unbounded"/>
             <xsd:element name="ExternalModel" type="ExternalModel" minOccurs="0" maxOccurs="unbounded"/-->
            <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType  name="clArgType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="prepend"/>
            <xsd:enumeration value="postpend" />
            <xsd:enumeration value="input"   />
            <xsd:enumeration value="output" />
            <xsd:enumeration value="text" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CodeCLArgsType">
      <xsd:simpleContent>
        <xsd:extension base="xsd:string">
          <xsd:attribute name="type" type="clArgType" use="required">
          </xsd:attribute>
          <!-- Required only when the type is 'output' -->
          <!-- TODO: This functionality should be available with XSD 1.1's -->
          <!--       xsd:alternative option. Look it up.                   -->
          <xsd:attribute name="arg" type="xsd:string">
          </xsd:attribute>
          <!-- Required only when the type is 'input' -->
          <!-- TODO: This functionality should be available with XSD 1.1's -->
          <!--       xsd:alternative option. Look it up.                   -->
          <xsd:attribute name="extension" type="xsd:string">
          </xsd:attribute>
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>

    <xsd:simpleType  name="fileArgType">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="input"  />
        <xsd:enumeration value="output" />
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CodeFileArgsType">
      <xsd:simpleContent>
        <xsd:extension base="xsd:string">
          <xsd:attribute name="type" type="fileArgType" use="required" />
          <!-- Will match entry in template input file? -->
          <!-- I don't think this is testable since it depends on another -->
          <!-- input file. -->
          <xsd:attribute name="arg" type="xsd:string" use="required" />
          <!-- Required only when the type is 'input' -->
          <!-- TODO: This functionality should be available with XSD 1.1's -->
          <!--       xsd:alternative option. Look it up.                   -->
          <xsd:attribute name="extension" type="xsd:string" />
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>

    <xsd:simpleType  name="CodeModelType">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="GenericCode" />
        <xsd:enumeration value="Relap5" />
        <xsd:enumeration value="RAVEN" />
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CodeModel">
      <xsd:sequence>
        <xsd:element name="executable" type="xsd:string" minOccurs="1" maxOccurs="1"/>
        <xsd:element name="alias" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        <xsd:element name="clargs" type="CodeCLArgsType" minOccurs="0" maxOccurs="unbounded"/>
        <xsd:element name="fileargs" type="CodeFileArgsType" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="name"     type="xsd:string"  use="required"/>
      <xsd:attribute name="subType"  type="CodeModelType"  use="required" />
    </xsd:complexType>

    <xsd:complexType name="DummyModel">
      <xsd:attribute name="name"     type="xsd:string"  use="required"/>
      <xsd:attribute name="subType"  type="xsd:string"  use="required" fixed=""/>
      <xsd:attribute name="print"    type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="ExternalModel">
      <xsd:sequence>
        <xsd:element name="variable" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="name"         type="xsd:string"  use="required"/>
      <xsd:attribute name="subType"      type="xsd:string"  use="required" fixed=""/>
      <xsd:attribute name="ModuleToLoad" type="xsd:string"  use="required"/>
    </xsd:complexType>

    <xsd:complexType name="ROM">
      <xsd:sequence minOccurs="0">
        <xsd:element name="Features"  type="xsd:string" minOccurs="1"/>
        <xsd:element name="Target"  type="xsd:string" minOccurs="1"/>
      </xsd:sequence>
      <xsd:attribute name="name"         type="xsd:string"  use="required" />
      <xsd:attribute name="subType"      type="xsd:string"  use="required" />
    </xsd:complexType>

    <!-- NDSpline does not have any additional features and does not require its own definition-->

    <xsd:simpleType  name="GaussPolyROMIndexSetType">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="TensorProduct" />
        <xsd:enumeration value="TotalDegree" />
        <xsd:enumeration value="HyperbolicCross" />
        <xsd:enumeration value="Custom" />
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="QuadratureType">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="Legendre" />
        <xsd:enumeration value="Hermite" />
        <xsd:enumeration value="Jacobi" />
        <xsd:enumeration value="ClenshawCurtis" />
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="PolynomialType">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="Legendre" />
        <xsd:enumeration value="Hermite" />
        <xsd:enumeration value="Jacobi" />
        <xsd:enumeration value="Laguerre" />
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="GaussPolynomialRom">
      <xsd:complexContent>
        <xsd:extension base="ROM">
          <xsd:sequence>
            <xsd:element name="IndexSet"  type="GaussPolyROMIndexSetType" minOccurs="1"/>
            <xsd:element name="PolynomialOrder"  type="xsd:integer" minOccurs="1"/>
            <!-- TODO: Do we want to test if this is a list of tuples? -->
            <xsd:element name="IndexPoints"  type="xsd:string" minOccurs="1"/>
            <xsd:element name="Interpolation">
              <xsd:complexType>
                <xsd:simpleContent>
                  <xsd:extension base="xsd:string">
                    <xsd:attribute name="quad" type="QuadratureType" />
                    <xsd:attribute name="poly" type="PolynomialType" />
                    <xsd:attribute name="weight" type="xsd:float" default="1" />
                  </xsd:extension>
                </xsd:simpleContent>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="HDMRRom">
      <xsd:complexContent>
        <xsd:extension base="ROM">
          <xsd:sequence>
            <xsd:element name="SobolOrder"  type="xsd:integer" minOccurs="1"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType  name="positiveInteger">
      <xsd:restriction   base="xsd:integer">
        <xsd:minExclusive value="0"/>
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="NDinvDistWeight">
      <xsd:complexContent>
        <xsd:extension base="ROM">
          <xsd:sequence>
            <xsd:element name="p"  type="positiveInteger" minOccurs="1"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="SciKitLearn">
      <xsd:complexContent>
        <xsd:extension base="ROM">
          <xsd:sequence>
            <xsd:element name="SKLtype" minOccurs="1">
<!--               <xsd:complexType>
                <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
              </xsd:complexType> -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

<!-- *********************************************************************** -->
<!--                               DataObjects                               -->
<!-- *********************************************************************** -->
    <xsd:complexType name="DataObjectsData">
      <xsd:sequence>
        <xsd:element name="TimePoint"    type="historyDataObjectsData" minOccurs="0" maxOccurs="unbounded"/>
        <xsd:element name="TimePointSet" type="commonDataObjectsData"  minOccurs="0" maxOccurs="unbounded"/>
        <xsd:element name="History"      type="historyDataObjectsData" minOccurs="0" maxOccurs="unbounded"/>
        <xsd:element name="Histories"    type="commonDataObjectsData"  minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="commonDataObjectsData">
        <xsd:all>
            <xsd:element name="Input"  type="xsd:string" minOccurs="1"/>
            <xsd:element name="Output" type="xsd:string" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="name"         type="xsd:string"  use="required"/>
        <xsd:attribute name="inputTs"      type="xsd:integer"/>
        <xsd:attribute name="operator"     type="xsd:string"/>
        <xsd:attribute name="hierarchical" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="historyDataObjectsData">
        <xsd:complexContent>
            <xsd:extension base="commonDataObjectsData">
                <xsd:attribute name="historyName" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="OutStreamData">
        <xsd:sequence>
            <!--xsd:element name="Print" type="PrintData" minOccurs="0" maxOccurs="unbounded"/ -->
            <!--xsd:element name="Plot"  type="PlotData"  minOccurs="0" maxOccurs="unbounded"/-->
            <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="PrintData">
        <xsd:all>
            <xsd:element name="type"      type="xsd:string" minOccurs="1" default="csv"/>
            <xsd:element name="source"    type="xsd:string" minOccurs="1"/>
            <xsd:element name="variables" type="xsd:string" minOccurs="0"/>
        </xsd:all>
        <xsd:attribute name="name"        type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:simpleType  name="PPsubType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="BasicStatistics"/>
            <xsd:enumeration value="ComparisonStatistics"/>
            <xsd:enumeration value="SafestPoint" />
            <xsd:enumeration value="LimitSurface" />
            <xsd:enumeration value="LimitSurfaceIntegral" />
            <xsd:enumeration value="External" />
            <xsd:enumeration value="TopologicalDecomposition" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="PostProcessor">
        <xsd:attribute name="name"        type="xsd:string" use="required"/>
        <xsd:attribute name="subtype"        type="PPsubType" use="required"/>
    </xsd:complexType>

    <xsd:simpleType  name="BasicStatsWhatType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="covariance matrix"/>
            <xsd:enumeration value="NormalizedSensitivity"/>
            <xsd:enumeration value="VarianceDependentSensitivity" />
            <xsd:enumeration value="sensitivity" />
            <xsd:enumeration value="pearson" />
            <xsd:enumeration value="expectedValue" />
            <xsd:enumeration value="sigma" />
            <xsd:enumeration value="variationCoefficient" />
            <xsd:enumeration value="variance" />
            <xsd:enumeration value="skewness" />
            <xsd:enumeration value="kurtosis" />
            <xsd:enumeration value="median" />
            <xsd:enumeration value="percentile" />
            <xsd:enumeration value="all" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="AssemblerObjectType">
      <xsd:simpleContent>
        <xsd:extension base='xsd:string'>
          <xsd:attribute name='class' type='xsd:string' use='required' />
          <xsd:attribute name='type'  type='xsd:string' use='required' />
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="BasicStatistics">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="what" type="BasicStatsWhatType" minOccurs="1"></xsd:element>
            <xsd:element name='biased' type='xsd:boolean' minOccurs="0" default='false'></xsd:element>
            <xsd:element name='parameters' type='xsd:string' minOccurs="1"></xsd:element>
            <xsd:element name='methodsToRun' type='xsd:string' minOccurs="0"></xsd:element>
            <!-- TODO: Somehow point to the things existing in the function block-->
            <!-- TODO: Also conditionally require the function node if methodsToRun is present -->
            <xsd:element name='Function' type="AssemblerObjectType" minOccurs="0" />
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType  name="CompStatsBinMethod">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="square-root"/>
            <xsd:enumeration value="sturges"/>
        </xsd:restriction>
    </xsd:simpleType>

    <!--TODO: Figure out what type any of these sub-elements are supposed to be -->
    <xsd:complexType name="ComparisonStatistics">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="kind" minOccurs="1">
              <xsd:complexType>
                <xsd:simpleContent>
                  <xsd:extension base='xsd:string'>
                    <xsd:attribute name='num_bins' type='xsd:integer' use='required' />
                    <xsd:attribute name='bin_method'  type='CompStatsBinMethod' use='required' />
                  </xsd:extension>
                </xsd:simpleContent>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name="compare" minOccurs="1">
              <xsd:complexType>
                <xsd:all>
                  <xsd:element name='data' type='xsd:string' />
                  <!--TODO: Must be one of the Distributions -->
                  <xsd:element name='reference' type='xsd:string'/>
                </xsd:all>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name="fz" type="xsd:boolean" />
            <xsd:element name="interpolation" type="xsd:string" />
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name='SafestPointVariable'>
      <xsd:all>
        <xsd:element name='distribution' type='xsd:string' />
        <xsd:element name='grid'>
          <xsd:complexType>
            <xsd:simpleContent>
              <xsd:extension base='xsd:integer'>
                <xsd:attribute name='steps' type='xsd:integer' use='required' />
                <xsd:attribute name='type'  type='xsd:integer' use='required' />
              </xsd:extension>
            </xsd:simpleContent>
          </xsd:complexType>
        </xsd:element>
      </xsd:all>
      <xsd:attribute name='class' type='xsd:string' use='required' />
      <xsd:attribute name='type'  type='xsd:string' use='required' />
    </xsd:complexType>

    <!--TODO: Figure out what type any of these sub-elements are supposed to be -->
    <xsd:complexType name="SafestPoint">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="kind" minOccurs="1"></xsd:element>
            <!-- TODO: Somehow point to the things existing in the Distributions block-->
            <xsd:element name='Distribution' type="AssemblerObjectType" minOccurs="1" />
            <xsd:element name="controllable" type='SafestPointVariable' />
            <xsd:element name="non-controllable" type='SafestPointVariable' />
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType  name="LimitSurfaceSide">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="negative"/>
        <xsd:enumeration value="positive"/>
        <xsd:enumeration value="both"/>
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="LimitSurface">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="parameters" type='xsd:string' minOccurs="1"/>
            <xsd:element name="tolerance" type='xsd:float' default="1e-4"/>
            <xsd:element name="side" type='LimitSurfaceSide' />
            <!-- TODO: Somehow point to the things existing in the function block-->
            <xsd:element name='ROM' minOccurs="0">
              <xsd:complexType>
                <xsd:simpleContent>
                  <xsd:extension base='xsd:string'>
                    <xsd:attribute name='class' type='xsd:string' use='required' />
                    <xsd:attribute name='type'  type='xsd:string' use='required' />
                  </xsd:extension>
                </xsd:simpleContent>
              </xsd:complexType>
            </xsd:element>

            <!-- TODO: Somehow point to the things existing in the function block-->
            <xsd:element name='Function' type="AssemblerObjectType" minOccurs="0" />
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="LimitSurfaceIntegral">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="variable" minOccurs="1">
              <xsd:complexType>
                <xsd:all minOccurs="0">
                  <!-- TODO: Somehow point to the things existing in the Distributions block-->
                  <xsd:element name="distribution" type="xsd:string" minOccurs="0" />
                  <!-- TODO: either the above or the two below are required-->
                  <xsd:element name="lowerBound" type="xsd:float" minOccurs="0" />
                  <xsd:element name="upperBound" type="xsd:float" minOccurs="0" />
                </xsd:all>
                <xsd:attribute name="name" type="xsd:string" />
              </xsd:complexType>
            </xsd:element>
            <xsd:element name="tolerance" type="xsd:float" minOccurs="0" default="1e-4" />
            <xsd:element name="integralType" type="xsd:string" minOccurs="0" fixed="MonteCarlo" />
            <xsd:element name="seed" type="xsd:integer" minOccurs="0" default="20021986" />
            <xsd:element name="target" type="xsd:string" minOccurs="0"/>
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="External">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="method" type="xsd:string" minOccurs="1" />
            <xsd:element name='Function' type="AssemblerObjectType" minOccurs="1" />
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType  name="TopoGraph">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="beta skeleton"/>
        <xsd:enumeration value="relaxed beta skeleton"/>
        <xsd:enumeration value="approximate knn"/>
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="TopoGradient">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="steepest"/>
        <xsd:enumeration value="maxflow"/>
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="TopoBeta">
      <xsd:restriction   base="xsd:float">
        <xsd:minExclusive value="0"/>
        <xsd:maxInclusive value="2"/>
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="TopoPersistence">
      <xsd:restriction   base="xsd:string">
        <xsd:enumeration value="difference"/>
        <xsd:enumeration value="probability"/>
        <xsd:enumeration value="count"/>
      </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="TopologicalDecomposition">
      <xsd:complexContent>
        <xsd:extension base="PostProcessor">
          <xsd:all minOccurs="0">
            <xsd:element name="graph" type="TopoGraph" default="beta skeleton"/>
            <xsd:element name="gradient" type="TopoGradient" default="steepest"/>
            <xsd:element name="beta" type="TopoBeta" default="1."/>
            <xsd:element name="knn" type="xsd:integer" default="-1"/>
            <xsd:element name="weighted" type="xsd:boolean" default="false"/>
            <xsd:element name="persistence" type="TopoPersistence" default="difference"/>
            <xsd:element name="simplification" type="xsd:float" default="0"/>
            <xsd:element name="parameters" type="xsd:string" minOccurs="1"/>
            <xsd:element name="response" type="xsd:string" minOccurs="1"/>
          </xsd:all>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

    <!--xsd:group name="MultiRunIOStep">
     <xsd:sequence>
     <xsd:element name="MultiRun"  type="MultiRunData" minOccurs="0" maxOccurs="unbounded"/>
     <xsd:element name="IOStep"    type="IOStepData"   minOccurs="0" maxOccurs="unbounded"/>
     </xsd:sequence>
     </xsd:group>

     <xsd:complexType name="StepsData">
     <xsd:sequence>
     <xsd:group ref="MultiRunIOStep" minOccurs="0" maxOccurs="unbounded"/>
     </xsd:sequence>
     </xsd:complexType>

     <xsd:complexType name="MultiRunData">
     <xsd:sequence>
     <xsd:element name="Sampler" minOccurs="1">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     <xsd:element name="Input" minOccurs="1">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     <xsd:element name="Model" minOccurs="1">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     <xsd:element name="Output" minOccurs="1" maxOccurs="unbounded">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     <xsd:element name="SolutionExport" minOccurs="0">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     </xsd:sequence>
     <xsd:attribute name="name"        type="xsd:string" use="required"/>
     <xsd:attribute name="pauseAtEnd"  type="xsd:string"/>
     <xsd:attribute name="sleepTime"   type="xsd:string"/>
     </xsd:complexType>

     <xsd:complexType name="IOStepData">
     <xsd:all>
     <xsd:element name="Input" minOccurs="1">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     <xsd:element name="Output" minOccurs="1">
     <xsd:complexType mixed="true">
     <xsd:attribute name="class" type="xsd:string" use="required"/>
     <xsd:attribute name="type"  type="xsd:string" use="required"/>
     </xsd:complexType>
     </xsd:element>
     </xsd:all>
     <xsd:attribute name="name"        type="xsd:string" use="required"/>
     <xsd:attribute name="pauseAtEnd"  type="xsd:string"/>
     </xsd:complexType-->

</xsd:schema>