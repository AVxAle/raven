#!/usr/bin/env python
import sys, os, subprocess

# Set the current working directory to the directory where this script is located
os.chdir(os.path.abspath(os.path.dirname(sys.argv[0])))

#### Set the name of the application here and moose directory relative to the application
app_name = 'RAVEN'

MOOSE_DIR = os.path.abspath(os.path.join('..', 'moose'))
#### See if a submodule is available
if os.path.exists(os.path.abspath(os.path.join('moose', 'framework', 'Makefile'))):
  MOOSE_DIR = os.path.abspath('moose')
#### See if MOOSE_DIR is already in the environment instead
if "MOOSE_DIR" in os.environ:
  MOOSE_DIR = os.environ['MOOSE_DIR']

sys.path.append(os.path.join(MOOSE_DIR, 'python'))
import path_tool
path_tool.activate_module('TestHarness')

#Try to import the raven libs dir into the PYTHONPATH

try:
  if os.environ.get("CHECK_PYTHON3","0") == "1":
    raven_libs_dir = subprocess.check_output("ls -d $HOME/raven_libs/pylibs3/*/python*/site-packages",shell=True,stderr=subprocess.STDOUT)
  else:
    raven_libs_dir = subprocess.check_output("ls -d $HOME/raven_libs/pylibs/*/python*/site-packages",shell=True,stderr=subprocess.STDOUT)
  raven_libs_dir = raven_libs_dir.decode().strip()
  os.environ["PYTHONPATH"] = raven_libs_dir +":"+os.environ.get("PYTHONPATH","")
  sys.path.append(raven_libs_dir)
except:
  sys.path.append(os.path.join("scripts","TestHarness","testers"))
  import RavenUtils
  missing,too_old = RavenUtils.checkForMissingModules()
  if len(missing) > 0:
    print "No raven_libs found and missing modules "+",".join(missing)
  if len(too_old) > 0:
    print "No raven_libs found and old version modules "+",".join(too_old)

#add framework contrib path
myPath = os.path.dirname(os.path.realpath(__file__))
os.environ["PYTHONPATH"] = os.path.join(myPath,'framework','contrib') + ":" + os.environ.get("PYTHONPATH","")

print "PYTHONPATH="+os.environ["PYTHONPATH"]

coverage = False
for i in sys.argv:
  if i == "--check_coverage": coverage = True
if coverage:
  from subprocess import call
  call(["./check_py_coverage.sh"])
else:
  from TestHarness import TestHarness
  # Run the tests!
  TestHarness.buildAndRun(sys.argv, app_name, MOOSE_DIR)
