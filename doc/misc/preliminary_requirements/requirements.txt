RAVEN must be able to parallelize running external codes.

Source: Manual 6.2 RunInfo: Input of Queue Modes

Explanation: RAVEN runs external codes, and sometimes they are not parallelized.  RAVEN will run faster if it can run multiple codes at the same time when multiple cores are available.  Even for parallelized codes it usually will be more efficient to run multiple instances in parallel than run one code parallelized.


RAVEN must be able to provide external codes the files that are needed for their running.

Source: Manual 7 Files

Explanation: RAVEN runs external codes, and each instance may need a different input file that needs to be generated from the sampler choices.  RAVEN also may need to read the output files in. (possibly with application specific code that is user provided.)



RAVEN must support 1-Dimensional probability distributions including generating random numbers from them.

Source: Manual 8.1 1-Dimensional Probability Distributions

Explanation: RAVEN needs to create different parameters for the simulations that it runs.  For the non-adaptive sampling, probability distributions are used for this (including flat distributions).  In order to do this, the distributions need to be able to calculate things like PDFs and CDFs and inverse CDFs.


RAVEN must support N-Dimensional probability distributions.  It must support multivariate normal distributions and distributions defined by tabular data.

Source: Manual 8.2 N-Dimensional Probability Distributions

Explanation: The N-Dimensional probability distributions allow the user to model stochastic dependencies between parameters.


RAVEN must support a variety of samplers that use probability distributions to sample the input space.

Source: Manual 9.1 Once-through Samplers

Explanation: Once through samplers allow sampling strategies such as Grid sampling, Monte Carlo and Latin Hypercube sampling.  These samplers allow the analyses to be performed.


RAVEN must support adaptive sampling that use already gathered samples to determine where to do new samples.

Source: Manual 9.3 Adaptive Samplers

Explanation: The adaptive samplers support sampling the input space, but in a more efficient manner.  One example of these samplers is a limit surface search.


RAVEN must support storing and retrieving data in a HDF5 database.

Source: Manual 11 Databases

Explanation: RAVEN uses HDF5 databases to store inputs and results for simulations, as well as other auxiliary information.


RAVEN must support outputting data in CSV format.

Source: Manual 12.1 Printing system

Explanation: The user needs to be able to get the data and examine it and sometimes process it in other programs.  Outputting the data in CSV files allows this use to be done.


RAVEN must support generating plots from the data it generates.

Source: Manual 12.2 Plotting system

Explanation: The user needs to be able to see the progress of the algorithms, and what the results are graphically.  As well, plots to be used in documentation need to be outputted.  The plotting capability of RAVEN is used for this.


RAVEN must be able to provide data to MOOSE based applications, and retrieve data if the application successfully completes.

Source: Manual 13.1 Code

Explanation: RAVEN uses external simulation software to calculate physical models.  RAVEN creates input files, calls the external code, and then reads in the results.


RAVEN must be able to generate Reduced Order Models from its data and use them to predict responses from a system.

Source: Manual 13.3 ROM

Explanation:  Often the physical model is computationally expensive.  For some models the relevant output parameters can be captured by a much simpler model that can be quickly calculated.  This is the purpose for the Reduced order model.


RAVEN must be able to provide data to a user provided python function, and retrieve the data from that.

Source: Manual 13.4 External Model

Explanation: Sometimes all that is needed for the simulation is a function that can be calculated in Python.  The external model allows this.  This executes a python function to determine the result.



RAVEN must be able to perform various calculation tasks, and transfer data to the next task.

Source: Manual 15 Steps

Explanation: Sequences of calculation are one of the main uses of RAVEN.  For example, a initial calculation can be used to generate data to train a ROM, and then later calculations can use the ROM for faster calculation.  As well, steps allow various post processing to be done.
